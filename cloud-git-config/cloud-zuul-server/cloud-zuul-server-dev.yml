spring:
  cloud:
    loadbalancer:
      retry:
        # 是否开启 Ribbon 请求重试机制
        enabled: true
  # rabbitmq 设置
  rabbitmq:
    host: 192.168.1.254
    port: 5672
    username: guest
    password: guest
  # redis 设置
  redis:
    host: 192.168.1.254
    port: 9031
  # 出现错误时, 直接抛出异常(便于异常统一处理，否则捕获不到404)
  mvc:
    throw-exception-if-no-handler-found: true
  # 不要为工程中的资源文件建立映射
  resources:
    add-mappings: false

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 断路器的超时时间,断路器的超时时间需要大于 ribbonTimeout ，不然不会触发重试
            # ribbonTimeout = (ribbonReadTimeout + ribbonConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1)
            timeoutInMilliseconds: 250000

ribbon:
  # ribbon请求处理的超时时间
  ReadTimeout: 20000
  # ribbon请求连接的超时时间
  ConnectTimeout: 20000
  # 是否对所有操作请求都进行重试
  OkToRetryOnAllOperations: true
  # 对当前实例的重试次数
  MaxAutoRetries: 1
  # 对下个实例重试的次数
  MaxAutoRetriesNextServer: 2
  # 最大http连接数，越大越好，但到到达一个临界点之后，就不会提高响应速度了
  MaxTotalHttpConnections: 2000
  # 每个host连接数
  MaxConnectionsPerHost: 1000

zuul:
  # 是否开启 API 请求重试机制
  retryable: true
  host:
    # 连接超时时间
    connect-timeout-millis: 20000
    # 响应超时时间
    socket-timeout-millis: 20000
    # 最大连接数，值越大越好，但到到达一个临界点之后，就不会提高响应速度了
    max-total-connections: 5000
    # 每个router最大连接数，降低请求时间，越小越好，但达到一定层级就没用了
    max-per-route-connections: 5
  # 限流设置
  ratelimit:
    # 是否开启限流
    enabled: true
    # 限流存储媒介
    repository: REDIS
    behind-proxy: true
    # 默认限流配置，无特殊配置时使用此配置
    default-policy-list:
    # 每个刷新间隔窗口的请求数量限制
    - limit: 2000
      # 每个刷新间隔窗口的请求时间限制，秒
      quota: 1000
      # 单位时间，秒
      refresh-interval: 20
      # 限流方式
      type:
      - user
      - origin
      - url
  # 路由规则
  routes:
    config:
      path: /config/**
      serviceId: CLOUD-CONFIG-SERVER
    appUserCenter:
      path: /appUserCenter/**
      serviceId: APP-USER-CENTER
  add-proxy-headers: true

# 日志设置
logging:
  level:
    root: info
  path: /data/logs/spring/zuul
  file:
    max-history: 90

oauth:
  # 公钥获取地址
  tokenKeyUri: http://192.168.1.254:9050/oauth/token_key
  # 验证 token 地址
  checkTokenUri: http://192.168.1.254:9050/oauth/check_token
  # 不验证 token uri，只需配置前置部分即可，例如配置 “/a”，以下全部生效：“/a/b”，“/a/b/c/...”，“/a/b?c=d&...”
  whiteList:
  - "/actuator" # 系统API，监控相关，勿动
  - "/test"

server:
  tomcat:
    accesslog:
      directory: /data/logs/spring/zuul
      enabled: true

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS